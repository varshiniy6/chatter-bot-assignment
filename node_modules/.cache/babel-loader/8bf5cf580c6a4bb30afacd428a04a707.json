{"ast":null,"code":"var _jsxFileName = \"/home/workspace/reactjs/sessions/authentication-and-authorisation/react-coding-challenges/chatter/src/components/Messages/components/Messages.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useCallback } from 'react';\nimport io from 'socket.io-client';\nimport useSound from 'use-sound';\nimport config from '../../../config';\nimport LatestMessagesContext from '../../../contexts/LatestMessages/LatestMessages';\nimport TypingMessage from './TypingMessage';\nimport InitialBotMessage from '../../../common/constants/initialBottyMessage';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Message from './Message';\nimport '../styles/_messages.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(config.BOT_SERVER_ENDPOINT, {\n  transports: ['websocket', 'polling', 'flashsocket']\n});\nconst InitialMessage = {\n  id: Date.now(),\n  message: InitialBotMessage,\n  user: 'bot'\n};\n\nfunction scrollToBottom() {\n  const messages = document.getElementById('message-list');\n  messages.scrollTo({\n    top: messages.scrollHeight,\n    behavior: 'smooth'\n  });\n}\n\nfunction Messages() {\n  _s();\n\n  const [playSend] = useSound(config.SEND_AUDIO_URL);\n  const [playReceive] = useSound(config.RECEIVE_AUDIO_URL);\n  const {\n    setLatestMessage\n  } = useContext(LatestMessagesContext);\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([InitialMessage]);\n  const [typing, setTyping] = useState(false); //initial render cases\n\n  useEffect(() => {\n    document.getElementById('user-message-input').focus();\n    socket.on('bot-typing', () => {\n      setTyping(true);\n      scrollToBottom();\n    });\n  }, []); //incoming messages from bot\n\n  useEffect(() => {\n    socket.off('bot-message'); // unsubscribe previous listener (if any)\n    //listen incoming messages with a fresh subscription\n\n    socket.on('bot-message', message => {\n      setTyping(false);\n      setMessages([...messages, {\n        message,\n        user: 'bot',\n        id: Date.now()\n      }]);\n      setLatestMessage('bot', message);\n      playReceive();\n      scrollToBottom();\n    });\n  }, [messages]); //outgoing message to bot from user; used useCallback for optimization\n\n  const sendMessage = useCallback(() => {\n    if (!message) return;\n    setMessages([...messages, {\n      message,\n      user: 'me',\n      id: Date.now()\n    }]);\n    playSend();\n    scrollToBottom();\n    socket.emit('user-message', message);\n    document.getElementById('user-message-input').value = '';\n    setMessage('');\n  }, [message, messages]);\n\n  const onChangeMessage = ({\n    target: {\n      value\n    }\n  }) => {\n    setMessage(value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messages\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages__list\",\n      id: \"message-list\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(Message, {\n        message: message,\n        nextMessage: messages[index + 1],\n        botTyping: typing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)), typing && /*#__PURE__*/_jsxDEV(TypingMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      message: message,\n      sendMessage: sendMessage,\n      onChangeMessage: onChangeMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Messages, \"a7Qm47p36UvbWas4GuaUq8+VIBc=\", false, function () {\n  return [useSound, useSound];\n});\n\n_c = Messages;\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"sources":["/home/workspace/reactjs/sessions/authentication-and-authorisation/react-coding-challenges/chatter/src/components/Messages/components/Messages.js"],"names":["React","useContext","useState","useEffect","useCallback","io","useSound","config","LatestMessagesContext","TypingMessage","InitialBotMessage","Header","Footer","Message","socket","BOT_SERVER_ENDPOINT","transports","InitialMessage","id","Date","now","message","user","scrollToBottom","messages","document","getElementById","scrollTo","top","scrollHeight","behavior","Messages","playSend","SEND_AUDIO_URL","playReceive","RECEIVE_AUDIO_URL","setLatestMessage","setMessage","setMessages","typing","setTyping","focus","on","off","sendMessage","emit","value","onChangeMessage","target","map","index"],"mappings":"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","sourcesContent":["import React, {useContext, useState, useEffect, useCallback} from 'react'\nimport io from 'socket.io-client'\nimport useSound from 'use-sound'\nimport config from '../../../config'\nimport LatestMessagesContext from '../../../contexts/LatestMessages/LatestMessages'\nimport TypingMessage from './TypingMessage'\nimport InitialBotMessage from '../../../common/constants/initialBottyMessage'\nimport Header from './Header'\nimport Footer from './Footer'\nimport Message from './Message'\nimport '../styles/_messages.scss'\n\nconst socket = io(config.BOT_SERVER_ENDPOINT, {\n  transports: ['websocket', 'polling', 'flashsocket'],\n})\n\nconst InitialMessage = {\n  id: Date.now(),\n  message: InitialBotMessage,\n  user: 'bot',\n}\n\nfunction scrollToBottom() {\n  const messages = document.getElementById('message-list')\n\n  messages.scrollTo({top: messages.scrollHeight, behavior: 'smooth'})\n}\n\nfunction Messages() {\n  const [playSend] = useSound(config.SEND_AUDIO_URL)\n  const [playReceive] = useSound(config.RECEIVE_AUDIO_URL)\n  const {setLatestMessage} = useContext(LatestMessagesContext)\n\n  const [message, setMessage] = useState('')\n  const [messages, setMessages] = useState([InitialMessage])\n  const [typing, setTyping] = useState(false)\n\n  //initial render cases\n  useEffect(() => {\n    document.getElementById('user-message-input').focus()\n    socket.on('bot-typing', () => {\n      setTyping(true)\n      scrollToBottom()\n    })\n  }, [])\n\n  //incoming messages from bot\n  useEffect(() => {\n    socket.off('bot-message') // unsubscribe previous listener (if any)\n\n    //listen incoming messages with a fresh subscription\n    socket.on('bot-message', message => {\n      setTyping(false)\n\n      setMessages([...messages, {message, user: 'bot', id: Date.now()}])\n      setLatestMessage('bot', message)\n      playReceive()\n      scrollToBottom()\n    })\n  }, [messages])\n\n  //outgoing message to bot from user; used useCallback for optimization\n  const sendMessage = useCallback(() => {\n    if (!message) return\n\n    setMessages([...messages, {message, user: 'me', id: Date.now()}])\n    playSend()\n    scrollToBottom()\n\n    socket.emit('user-message', message)\n\n    document.getElementById('user-message-input').value = ''\n    setMessage('')\n  }, [message, messages])\n\n  const onChangeMessage = ({target: {value}}) => {\n    setMessage(value)\n  }\n\n  return (\n    <div className=\"messages\">\n      <Header />\n      <div className=\"messages__list\" id=\"message-list\">\n        {messages.map((message, index) => (\n          <Message\n            message={message}\n            nextMessage={messages[index + 1]}\n            botTyping={typing}\n          />\n        ))}\n        {typing && <TypingMessage />}\n      </div>\n      <Footer\n        message={message}\n        sendMessage={sendMessage}\n        onChangeMessage={onChangeMessage}\n      />\n    </div>\n  )\n}\n\nexport default Messages\n"]},"metadata":{},"sourceType":"module"}